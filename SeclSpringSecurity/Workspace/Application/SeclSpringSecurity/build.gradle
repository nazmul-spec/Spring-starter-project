buildscript {
    repositories {
        maven { url "http://repo.spring.io/libs-snapshot" }
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.0.2.RELEASE")
    }
}

apply plugin: 'maven'
apply plugin: 'java' 
apply plugin: 'war'
apply plugin: 'eclipse' 
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot'
apply plugin: 'jacoco'

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
	maven { url 'http://repo.springsource.org/libs-release' }
	maven { url 'https://repository.jboss.org/nexus/content/repositories/deprecated' }
	maven { url 'https://maven.java.net/content/groups/promoted' }
	maven { url 'http://repo.spring.io/libs-release' }
}

buildDir = 'war'

dependencies {
	compile fileTree(dir: 'src/main/webapp/WEB-INF/lib', include: '*.jar')
	compile 'log4j:log4j:1.2.16'
	compile 'ch.qos.logback:logback-classic:1.1.2'
	compile 'ch.qos.logback:logback-core:1.1.2'
	compile 'org.apache.commons:commons-io:1.3.2'
	compile 'commons-fileupload:commons-fileupload:1.2'
	compile 'org.slf4j:slf4j-api:1.7.6'
	compile 'org.slf4j:slf4j-simple:1.7.6'
	compile 'org.fusesource.jansi:jansi:1.11'
	compile 'com.google.guava:guava:r05'
	compile 'com.sun.jersey:jersey-server:1.8'
	compile 'com.sun.jersey:jersey-core:1.8'
	compile 'com.sun.jersey:jersey-json:1.8'
	compile 'com.sun.jersey:jersey-client:1.8'
	compile 'com.sun.jersey.contribs:jersey-spring:1.8'
	compile 'org.springframework:spring-web:3.0.5.RELEASE'
	compile 'org.springframework:spring-jdbc:2.5.6'
	compile 'org.springframework:spring-orm:3.0.5.RELEASE'
	compile 'org.springframework:spring-core:3.0.5.RELEASE'
	compile 'org.springframework:spring-context-support:3.0.5.RELEASE'
	compile 'org.springframework:spring-tx:3.0.5.RELEASE'
	compile 'org.quartz-scheduler:quartz:1.7.3'
	compile 'mysql:mysql-connector-java:5.1.19'
	compile 'org.springframework:spring-hibernate3:2.0.6'
	compile 'javax.transaction:jta:1.1'
	compile 'antlr:antlr:2.7.7'
	compile 'cglib:cglib:2.2'
	compile 'commons-collections:commons-collections:3.2.1'
	compile 'commons-digester:commons-digester:2.1'
	compile 'dom4j:dom4j:1.6.1'
	compile 'xml-apis:xml-apis:1.0.b2'
	compile 'com.google.code.gson:gson:2.2.2'
	compile 'com.googlecode.lambdaj:lambdaj:2.3'
	compile 'org.hamcrest:hamcrest-all:1.3'
	compile 'org.springframework.security:spring-security-web:3.2.0.M2'
	compile 'org.springframework.security:spring-security-core:3.2.0.M2'
	compile 'org.springframework.security:spring-security-config:3.2.0.M2'
	compile 'joda-time:joda-time:2.3'
	compile 'net.glxn:qrgen:1.3'
	compile 'com.google.zxing:core:1.7'
	compile 'com.google.zxing:javase:1.7'
	compile 'com.itextpdf:itextpdf:5.5.0'
	compile 'com.itextpdf:itext-pdfa:5.5.0'
	compile 'com.itextpdf:itext-xtra:5.5.0'
	compile 'com.couchbase.client:couchbase-client:1.4.2'
	compile 'org.apache.httpcomponents:httpclient:4.3'
	compile 'com.ning:async-http-client:1.7.5'
	compile 'javax:javaee-api:7.0-b82'
	compile 'org.postgresql:postgresql:9.3-1100-jdbc4'
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'commons-dbcp:commons-dbcp:1.4'
	compile 'com.googlecode.grep4j:grep4j:1.8.7'
	compile 'org.apache.poi:poi-ooxml:3.9'
	compile 'org.rosuda.REngine:Rserve:1.8.1'
	compile 'com.github.lucarosellini.rJava:JRIEngine:0.9-7'
	compile 'com.esotericsoftware.yamlbeans:yamlbeans:1.06'
	compile 'org.jpos:jpos:1.9.0'
	compile 'net.sourceforge.jexcelapi:jxl:2.6.12'
	testCompile 'org.springframework:spring-test:2.5.3'
	testCompile 'junit:junit:4.8.2'
}

war {
	from('resources')  {
		include '*.properties'
		include '*.xml'
		into 'WEB-INF/classes/'
    }    
    webXml = file('src/main/webapp/WEB-INF/web.xml')	
}

def tstamp = new Date().format('yyyy-MM-dd_HH-mm-ss')
def buildLogDir = "${rootDir}/build/logs"
mkdir("${buildLogDir}")
def buildLog = new File("${buildLogDir}/${tstamp}_buildLog.log")

import org.gradle.logging.internal.*
System.setProperty('org.gradle.color.error', 'RED')

gradle.services.get(LoggingOutputInternal).addStandardOutputListener (new StandardOutputListener () {
    void onOutput(CharSequence output) {
        buildLog << output
    }
})

gradle.services.get(LoggingOutputInternal).addStandardErrorListener (new StandardOutputListener () {
    void onOutput(CharSequence output) {
        buildLog << output
    }
})
